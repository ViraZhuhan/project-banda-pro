{"mappings":"kpBAAA,IAAAA,EAAAC,EAAA,S,0BAOA,MAAMC,GAAO,E,WAAAC,WAEPC,EAAY,IAAI,EAAAJ,EAAAG,UAEtBE,iBACE,IACE,MAAMC,QAAiBF,EAAUG,aACR,OAArBD,EAASE,SAAgD,IAA5BF,EAASE,QAAQC,QAEvCH,EAASE,UACdN,EAAKQ,QAAQC,UAAUC,SAAS,oBAClC,EAAAC,EAAAC,eAAcR,EAASE,QAAQO,MAAM,EAAG,MAExC,EAAAF,EAAAC,eAAcR,EAASE,QAAQO,MAAM,EAAG,I,CAG5C,MAAOC,GACPC,EAAAC,W,EAIJC,E,wFC5BA,IAAAC,EAAAnB,EAAA,SAIA,SAASoB,IACPC,EAAAF,GAASG,OAAOC,QACd,mD,2FCNJvB,EAAA,S,yCAKA,MAAMwB,GAAO,EAAAC,EAAAvB,WA4Cb,SAASwB,EAAcC,GA1CvB,IAAgBC,EAgDdJ,EAAKf,QAAQoB,UAAY,GAJzBL,EAAKf,QAAQoB,WA5CCD,EA4CkBD,EA3CzBC,EAAKE,KACV,EAACC,YAAEA,EAAWC,MAAEA,EAAKC,aAAEA,EAAYC,aAAEA,EAAYC,UAAEA,EAASC,GAAEA,KAUrD,iCAAiCA,kEANvBL,EACb,mCAAmCA,IACnC,6DAMiDC,qGAEnBA,yFAbnB,EAAAK,EAAAC,YAAWH,QACV,IAAII,KAAKL,GAAcM,4JAkBd,GAAfP,wkBAU2BA,0GAYFQ,KAAK,G,8HCnD9C,IAAAC,EAAA1C,EAAA,SAGY,IAAI,E,WAAAE,SAAhB,MAEayC,EAAaC,IACxB,IAAKC,MAAMC,QAAQF,GACjB,MAAO,gBAET,MAAMG,EAAcL,EAAAM,OACjBC,QAAO,EAACb,GAAEA,KAASQ,EAAMM,SAASd,KAClCN,KAAI,EAACqB,KAAEA,KAAWA,IAErB,OAAKJ,EAAYvC,OAENuC,EAAYvC,OAAS,EACvB,GAAGuC,EAAYjC,MAAM,EAAG,GAAG2B,KAAK,QAEhCM,EAAYN,KAAK,MAJjB,eAIsB,C,mFClB1B,MAAMW,EAAS,CAClB,CAAEhB,GAAI,GAAIe,KAAM,UAEhB,CAAEf,GAAI,GAAIe,KAAM,aAEhB,CAAEf,GAAI,GAAIe,KAAM,aAEhB,CAAEf,GAAI,GAAIe,KAAM,UAEhB,CAAEf,GAAI,GAAIe,KAAM,SAEhB,CAAEf,GAAI,GAAIe,KAAM,eAEhB,CAAEf,GAAI,GAAIe,KAAM,SAEhB,CAAEf,GAAI,MAAOe,KAAM,UAEnB,CAAEf,GAAI,GAAIe,KAAM,WAEhB,CAAEf,GAAI,GAAIe,KAAM,WAEhB,CAAEf,GAAI,GAAIe,KAAM,UAEhB,CAAEf,GAAI,MAAOe,KAAM,SAEnB,CAAEf,GAAI,KAAMe,KAAM,WAElB,CAAEf,GAAI,MAAOe,KAAM,WAEnB,CAAEf,GAAI,IAAKe,KAAM,mBAEjB,CAAEf,GAAI,MAAOe,KAAM,YAEnB,CAAEf,GAAI,GAAIe,KAAM,YAEhB,CAAEf,GAAI,MAAOe,KAAM,OAEnB,CAAEf,GAAI,GAAIe,KAAM,W","sources":["src/js/create-trends.js","src/js/components/msg-error.js","src/js/render-card.js","src/js/components/genre-list.js","src/js/components/genres.js"],"sourcesContent":["import Api from './api';\nimport { noFilmError, onFetchError } from './components/msg-error';\nimport { createGallery } from './render-card';\nimport getRefs from './components/get-refs';\n// import onOpenModalEmpty from './modal-empty';\n\n\nconst refs = getRefs();\n\nconst searchApi = new Api();\n\nasync function createWeekTrendsCatalog() {\n  try {\n    const response = await searchApi.weekTrends();\n    if (response.results === null || response.results.length === 0) {\n      // onOpenModalEmpty();\n    } else if (response.results) {\n      if (refs.gallery.classList.contains('gallery-catalog')) {\n        createGallery(response.results.slice(0, 10));\n      } else {\n        createGallery(response.results.slice(0, 3));\n      }\n    }\n  } catch (error) {\n    noFilmError;\n  }\n}\n\ncreateWeekTrendsCatalog();\n\n// export { createWeekTrendsCatalog };\nexport { createWeekTrendsCatalog};","import Notiflix from 'notiflix';\n\nexport { noFilmError, onFetchError, noGenresError};\n\nfunction noFilmError() {\n  Notiflix.Notify.warning(\n    `Sorry, there are no films. Please try again late`\n  );\n}\n\nfunction onFetchError() {\n  Notiflix.Notify.failure(`Please write something and try again`);\n}\n\nfunction noGenresError() {\n    Notiflix.Notify.warning(\n      `Sorry, there are no genres. Please try again late`\n    );\n  }\n\n\n","import { initRatings } from './init-rating';\nimport getRefs from './components/get-refs';\nimport { genresList } from './components/genre-list';\nimport initRating from './init-rating';\n\nconst refs = getRefs();\n\nfunction markup(data) {\n  return data.map(\n    ({ poster_path, title, vote_average, release_date, genre_ids, id }) => {\n      const genres = genresList(genre_ids);\n      const release = new Date(release_date).getFullYear();\n\n      const imageUrl = poster_path\n        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n        : 'https://via.placeholder.com/395x574?text=No+Image';\n\n      // initRatings();\n\n      return `<li class=\"gallery__item\" id='${id}'>\n        <article>\n        <img class=\"gallery__img\" src=\"${imageUrl}\" alt=\"${title}\" width=\"395\" >\n          <div class=\"gallery__details\">\n            <p class=\"details__title\">${title}</p>\n            <div class=\"wraper__details\">\n            <p class=\"movieGenres\">${genres} | ${release}</p>\n              <div class=\"rating\">\n              <div class=\"rating__body\">\n              <div class=\"rating__active\" style=\"width: ${\n                vote_average * 10\n              }%;\"></div>>\n                <div class=\"rating__items\">\n                  <input type=\"radio\" class=\"rating__item\" value=\"1\" name=\"rating\" />\n                  <input type=\"radio\" class=\"rating__item\" value=\"2\" name=\"rating\" />\n                  <input type=\"radio\" class=\"rating__item\" value=\"3\" name=\"rating\" />\n                  <input type=\"radio\" class=\"rating__item\" value=\"4\" name=\"rating\" />\n                  <input type=\"radio\" class=\"rating__item\" value=\"5\" name=\"rating\" />\n                </div>\n              </div>\n              <div class=\"rating__value\">${vote_average}</div>\n            </div>\n            </div>\n          </div>\n        </article>\n        </li>`;\n    }\n  );\n}\n\nfunction createGallery(films) {\n  clearGallery();\n  refs.gallery.innerHTML = markup(films).join('');\n}\n\nfunction clearGallery() {\n  refs.gallery.innerHTML = '';\n}\n\nexport { createGallery, clearGallery };\n","import { genres } from './genres';\nimport Api from '../api';\n\nconst api = new Api();\n\nexport const genresList = array => {\n  if (!Array.isArray(array)) {\n    return 'Unknown genre';\n  }\n  const genreResult = genres\n    .filter(({ id }) => array.includes(id))\n    .map(({ name }) => name);\n\n  if (!genreResult.length) {\n    return 'Unknown genre';\n  } else if (genreResult.length > 2) {\n    return `${genreResult.slice(0, 2).join(', ')}`;\n  } else {\n    return genreResult.join(', ');\n  }\n};\n\nasync function getGenre(movieId) {\n  try {\n    const response = api.fetchGenres(movieId);\n    const genres = response.data.genres\n      .slice(0, 2)\n      .map(genre => genre.name)\n      .join(', ');\n    return genres;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","export const genres = [\n    { id: 28, name: 'Action' },\n  \n    { id: 12, name: 'Adventure' },\n  \n    { id: 16, name: 'Animation' },\n  \n    { id: 35, name: 'Comedy' },\n  \n    { id: 80, name: 'Crime' },\n  \n    { id: 99, name: 'Documentary' },\n  \n    { id: 18, name: 'Drama' },\n  \n    { id: 10751, name: 'Family' },\n  \n    { id: 14, name: 'Fantasy' },\n  \n    { id: 36, name: 'History' },\n  \n    { id: 27, name: 'Horror' },\n  \n    { id: 10402, name: 'Music' },\n  \n    { id: 9648, name: 'Mystery' },\n  \n    { id: 10749, name: 'Romance' },\n  \n    { id: 878, name: 'Science Fiction' },\n  \n    { id: 10770, name: 'TV Movie' },\n  \n    { id: 53, name: 'Thriller' },\n  \n    { id: 10752, name: 'War' },\n  \n    { id: 37, name: 'Western' },\n  ];\n  "],"names":["$7rYDH","parcelRequire","$fc5d2d3471e39ff0$var$refs","default","$fc5d2d3471e39ff0$var$searchApi","async","response","weekTrends","results","length","gallery","classList","contains","$7X0WP","createGallery","slice","error","$4njDn","noFilmError","$fc5d2d3471e39ff0$export$2f0a4a46725644c2","$7Y9D8","$32f88a58cf5131f2$export$bcc7fc7904691763","$parcel$interopDefault","Notify","warning","$5c9ec74aeed8cd43$var$refs","$dbTx9","$5c9ec74aeed8cd43$export$dac8b9bf675ebb55","films","data","innerHTML","map","poster_path","title","vote_average","release_date","genre_ids","id","$jEZFs","genresList","Date","getFullYear","join","$haSTN","$e50196ace6e0d212$export$65f5202b5c3d7552","array","Array","isArray","genreResult","genres","filter","includes","name","$c80df49edc560f2a$export$be3a0ca764f9df2b"],"version":3,"file":"index.bea5274d.js.map"}